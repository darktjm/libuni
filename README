This is a simple interface to the Unicode Character Database and
other small Unicode-related utilities.  It was translated from two
other projects of mine that had separate Unicode-related
implementations.

You can query a large number of properties consistently (56 boolean,
21 enumerated, 7 numeric, 24 string at the time of this writing), and
if you link statically, you will only burden your executable with the
properties you actually use.  19 named Unicode algorithms are also
implemented (all listed named algorithms in 6.2 except for UBA and
SCSU), along with a few unnamed algorithms from the standard and
various annexes.

Like some of my other literate projects, I have split off the user
documentation into a separate document, and have uploaded that to the
downloads section (just the PDF version for now):

  https://bitbucket.org/darktjm/libuni/downloads/uni-doc.pdf

The user documentation should document every single exported symbol,
including ones that are meant for internal use.  If any are missing,
that's a bug.

The noweb source code is attached to the documentation.  It is
available in PDF form as well:

  https://bitbucket.org/darktjm/libuni/downloads/uni.pdf
  
Note that it contains no Unicode Consortium provided information; that
is all expected to be downloaded separately by the user (as documented
in the Build chapter).  That information is parsed and converted to C
during the build process, so it is no longer required after building.

It's not really meant to be stable/usable yet.  Still to do before 1.0:
  - finish collation-related code (locale support via CLDR)
  - make installation painless:
    - create tar files with all sources, including code generated from
      UCD & CLDR & XML spec
    - figure out how to make shared libraries more easily without
      invoking libtool (libtool is a pain) or being Linux-specific
        currently, on Linux:
	- build with -fPIC in CFLAGS (gcc/arch dependent)
	- for x in libuni libuni_cmph; do
	    ld -s -o $x.so.1.0 -shared -soname $x.so.1 -whole-archive $x.a
	    # following should be done automatically by ldconfig anyway
	    ln -sf $x.so.1.0 $x.so.1
	    # but not this one
	    ln -sf $x.so.1 $x.so
	  done
  - finish at least one of my major users to verify API is OK

As with my other literate projects, building depends on the
literate-build project, although the main source for that is attached
to the PDF documents, so you don't really need to go get it:

  https://bitbucket.org/darktjm/literate-build

This is currently my second-largest single noweb source that I have
yet to abandon (>21k lines, ~360 pages, 48 of which are API docs; >12k
loc).  Normally I would have split this into multiple documents by
now, but I don't really see an easy, clean split.  At least it's no
longer just a (way too long) section in another document.
